
upstream shiny {
  server shiny:3838;
}

# the django component nginx needs to connect to
upstream django {
  # server unix:///path/to/your/image/image.sock; # for a file socket
  server uwsgi:8000; # for a web port socket (we'll use this first)
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
  # the port your site will be served on
  listen      80;

  # the domain name it will serve for
  server_name localhost; # substitute your machine's IP address or FQDN
  charset     utf-8;

  # access log: disabled in docker image
  #access_log  /var/log/nginx/log/host.access.log  main;

  #the default error_page
  error_page  404              /404.html;

  # redirect server error pages to the static page /50x.html
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   /usr/share/nginx/html;
  }

  # max upload size
  client_max_body_size 75M;   # adjust to taste

  # enable the cache which stores information about open files. It does not actually
  # store file contents itself but only information. After 180 secs, cache is wiped out
  open_file_cache max=5000 inactive=180;

  # however If there is activity though, you can prevent Nginx from removing the cache
  # entry. This directive defines the amount of time an entry must be accessed in order
  # to be eligible for protection, until Nginx decides to clear out older entries to free up
  # some space.
  open_file_cache_min_uses 3;

  # Enables or disables logging of sub-requests triggered by internal redirects
  # or SSI requests
  log_subrequest on;

  # Nginx will issue log messages for every operation performed by the rewrite engine
  # at the notice error level
  rewrite_log on;

  # merging multiple consecutive slashes in a URI (eg //. Useful!!!)
  merge_slashes on;

  # whether or not Nginx should inform the clients of the running version number.
  # it might be a good idea to hide your version number for security reasons
  server_tokens off;

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  location ~ /\. {
    deny  all;
  }

  # if anyone tries to access a '.py' file directly, return a File Not Found code
  location ~* ^.+\.py$ {
    return 404;
  }

  # Django media
  location /media/  {
    # your Django project's media files - amend as required. The final / is important
    alias /var/uwsgi/shiny/media/;
  }

  # Django static
  location /static/ {
    # your Django project's static files - amend as required
    alias /var/uwsgi/shiny/static/;
  }

  # shiny server
  location /shiny/ {
    # http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
    # we tell nginx to call that location for each request
    # the auth path will be defined in django application
    auth_request /_auth/;
    auth_request_set $auth_status $upstream_status;
    auth_request_set $user $upstream_http_x_forwarded_user;
    error_page 401 = @error401;

    rewrite ^/shiny/(.*)$ /$1 break;
    proxy_pass http://shiny/;
    proxy_redirect http://shiny/ $scheme://$host/shiny/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_read_timeout 60s;

    # Set proxy headers for the passthrough (https://www.djm.org.uk/wordpress-nginx-reverse-proxy-caching-setup/)
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-User $user;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass_header Set-Cookie;
  }

  # this a mixed solution I found in
  # https://redbyte.eu/en/blog/using-the-nginx-auth-request-module/
  # https://developers.shopware.com/blog/2015/03/02/sso-with-nginx-authrequest-module/
  # https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-subrequest-authentication/

  # As the request body is discarded for authentication subrequests, you will need
  # to set the proxy_pass_request_body directive to off and also set the Content-Length
  # header to a null string. The uwsgi has to read (consume) a POST body and if he
  # can't, the communication socket with your webserver may be clobbered
  # (https://uwsgi-docs.readthedocs.io/en/latest/ThingsToKnow.html)
  # Passing a POST request using the auth_request_set directly to uwsgi will not
  # work, since it seems impossible to remove body from the uwsgi request. So
  # let's do an internal redirect to NGINX in which I remove POST body. In this redirect
  # we will call the django /auth/ location with an empty body
  location = /_auth/ {
    internal;
    proxy_pass              http://localhost/auth/;
    proxy_pass_request_body off;
    proxy_set_header        Content-Length "";
    proxy_set_header        X-Original-URI $request_uri;
  }

  # this location will be a redirect to django login url followed by a redirect
  # as managed by django, so you can set a URL, be redirect to AUTH and then
  # reach such location after logging
  # https://developer.okta.com/blog/2018/08/28/nginx-auth-request
  location @error401 {
    add_header Set-Cookie "NSREDIRECT=$scheme://$http_host$request_uri;";
    return 302 $scheme://$http_host/accounts/login/?next=$scheme://$http_host$request_uri;
  }

  # Finally, send all non-media requests to the Django server.
  location / {
    # Sets the root directory for requests
    root /var/uwsgi/shiny;

    # passing modified URI to django upstream
    uwsgi_pass  django;

    # the default uwsgi_params file of nginx
    include     uwsgi_params;

    # let uWSGI mount application itself: https://stackoverflow.com/a/40496307

    # Setting timeout
    uwsgi_read_timeout  120;
    uwsgi_send_timeout  120;
  }

}
